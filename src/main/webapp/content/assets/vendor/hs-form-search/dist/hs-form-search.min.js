__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HSFormSearch; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/js/utils/index.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


var dataAttributeName = 'data-hs-form-search-options';
var defaults = {
  clearIcon: null,
  defaultIcon: null,
  delay: 300,
  isLoading: false,
  dropMenuOffset: 0,
  dropMenuDuration: 300,
  toggleIconOnFocus: false,
  activeClass: null,
  handlers: {}
};

var HSFormSearch = /*#__PURE__*/function () {
  function HSFormSearch(el, options, id) {
    _classCallCheck(this, HSFormSearch);

    this.collection = [];
    var that = this;
    var elems;

    if (el instanceof HTMLElement) {
      elems = [el];
    } else if (el instanceof Object) {
      elems = el;
    } else {
      elems = document.querySelectorAll(el);
    }

    for (var i = 0; i < elems.length; i += 1) {
      that.addToCollection(elems[i], options, id || elems[i].id);
    }

    if (!that.collection.length) {
      return false;
    } // initialization calls


    that._init();

    return this;
  }

  _createClass(HSFormSearch, [{
    key: "_init",
    value: function _init() {
      var _this = this;

      var that = this;

      var _loop = function _loop(i) {
        var _$el = void 0;

        var _options = void 0;

        if (that.collection[i].hasOwnProperty('$initializedEl')) {
          return "continue";
        }

        _$el = that.collection[i].$el;
        _options = that.collection[i].options;
        _options.$loadingIcon = document.querySelector(_options.loadingIcon);
        _options.$clearIcon = document.querySelector(_options.clearIcon);
        _options.$defaultIcon = document.querySelector(_options.defaultIcon);
        _options.$dropMenuElement = document.querySelector(_options.dropMenuElement);

        _this.toggleIcon(_$el.value.length > 0, _options, _$el);

        _options.$clearIcon.addEventListener('click', function () {
          _$el.value = '';
          that.toggleIcon(false, _options, _$el);

          if (Object.prototype.hasOwnProperty.call(that.collection[i].$initializedEl.events, 'clear')) {
            that.collection[i].$initializedEl.events.clear();
          }
        });

        if (_options.toggleIconOnFocus) {
          _$el.addEventListener('click', function (e) {
            that.toggleIcon(true, _options, _$el);
          });
        } else {
          _$el.addEventListener('input', function (e) {
            that.toggleIcon(e.target.value.length > 0, _options, _$el);
          });
        }

        if (_options.$dropMenuElement) {
          _options.$dropMenuElement.classList.add('animated', 'hs-form-search-menu-hidden', 'hs-form-search-menu-initialized');

          document.addEventListener('click', function (e) {
            if (e.target.closest('input')) return;

            if (_$el !== e.target && e.target.closest('a') || _$el !== e.target && window.getComputedStyle(_options.$dropMenuElement).display === 'block' && !e.target.closest(_options.dropMenuElement)) {
              _options.$dropMenuElement.classList.remove('slideInUp');

              _options.$dropMenuElement.classList.add('fadeOut');

              if (Object.prototype.hasOwnProperty.call(that.collection[i].$initializedEl.events, 'close')) {
                that.collection[i].$initializedEl.events.close(_options.$dropMenuElement);
              }

              if (_options.toggleIconOnFocus) {
                that.toggleIcon(_$el.value.length > 0, _options, _$el);
              }

              setTimeout(function () {
                _options.$dropMenuElement.classList.add('hs-form-search-menu-hidden');
              }, _options.dropMenuDuration);
            }
          });

          _$el.addEventListener('click', function () {
            if (_options.$dropMenuElement.style.display !== 'block') {
              setTimeout(function () {
                _options.$dropMenuElement.style.top = 100 + _options.dropMenuOffset + '%';
                _options.$dropMenuElement.style.width = '100%';
                _options.$dropMenuElement.style.animationDuration = _options.dropMenuDuration + 'ms';

                _options.$dropMenuElement.classList.remove('hs-form-search-menu-hidden', 'fadeOut');

                _options.$dropMenuElement.classList.add('slideInUp');
              }, 1);
            }
          });
        }

        that.collection[i].$initializedEl = _objectSpread(_objectSpread({}, that.collection[i]), {}, {
          events: {},
          loading: function loading() {
            var isLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var input = _$el.value.length > 0;

            if (isLoading) {
              _options.isLoading = true;
              Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(_options.$defaultIcon, 0);
              Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(_options.$clearIcon, 0);
              _options.$loadingIcon.style.display = 'block';
            } else {
              _options.isLoading = false;
              that.toggleIcon(input, _options, _$el);
            }
          },
          on: function on(event, callback) {
            that.collection[i].$initializedEl.events[event] = callback;
          }
        });
      };

      for (var i = 0; i < that.collection.length; i += 1) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }
    }
  }, {
    key: "toggleIcon",
    value: function toggleIcon(input, settings, $el) {
      var that = this;

      if (!settings.isLoading) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(settings.$loadingIcon, 0);

        if (!settings.$defaultIcon) {
          if (input) {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeIn"])(settings.$clearIcon, settings.$loadingIcon ? 10 : settings.delay);
            $el.classList.add(settings.activeClass);
          } else {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(settings.$clearIcon, 0);
            $el.classList.remove(settings.activeClass);
          }
        } else {
          if (input) {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(settings.$defaultIcon, 0);
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeIn"])(settings.$clearIcon, settings.$loadingIcon ? 10 : settings.delay);
            $el.classList.add(settings.activeClass);
          } else {
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(settings.$clearIcon, 0);
            Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeIn"])(settings.$defaultIcon, settings.$loadingIcon ? 10 : settings.delay);
            $el.classList.remove(settings.activeClass);
          }
        }
      }
    }
  }, {
    key: "loading",
    value: function loading() {
      var isLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var input = this.$el.value.length > 0;

      if (isLoading) {
        this.settings.isLoading = true;
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(this.defaultIcon, 0);
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__["fadeOut"])(this.clearIcon, 0);
        this.loadingIcon.style.display = 'block';
      } else {
        this.settings.isLoading = false;
        this.toggleIcon(input, this.settings);
      }
    }
  }, {
    key: "addToCollection",
    value: function addToCollection(item, options, id) {
      this.collection.push({
        $el: item,
        id: id || null,
        options: Object.assign({}, defaults, item.hasAttribute(dataAttributeName) ? JSON.parse(item.getAttribute(dataAttributeName)) : {}, options)
      });
    }
  }, {
    key: "getItem",
    value: function getItem(item) {
      if (typeof item === 'number') {
        return this.collection[item].$initializedEl;
      } else {
        return this.collection.find(function (el) {
          return el.id === item;
        }).$initializedEl;
      }
    }
  }]);

  return HSFormSearch;
}();


